// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  interview: (where?: InterviewWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  sauce: (where?: SauceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  interview: (where: InterviewWhereUniqueInput) => InterviewNullablePromise;
  interviews: (args?: {
    where?: InterviewWhereInput;
    orderBy?: InterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Interview>;
  interviewsConnection: (args?: {
    where?: InterviewWhereInput;
    orderBy?: InterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InterviewConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  sauce: (where: SauceWhereUniqueInput) => SauceNullablePromise;
  sauces: (args?: {
    where?: SauceWhereInput;
    orderBy?: SauceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sauce>;
  saucesConnection: (args?: {
    where?: SauceWhereInput;
    orderBy?: SauceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SauceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInterview: (data: InterviewCreateInput) => InterviewPromise;
  updateInterview: (args: {
    data: InterviewUpdateInput;
    where: InterviewWhereUniqueInput;
  }) => InterviewPromise;
  updateManyInterviews: (args: {
    data: InterviewUpdateManyMutationInput;
    where?: InterviewWhereInput;
  }) => BatchPayloadPromise;
  upsertInterview: (args: {
    where: InterviewWhereUniqueInput;
    create: InterviewCreateInput;
    update: InterviewUpdateInput;
  }) => InterviewPromise;
  deleteInterview: (where: InterviewWhereUniqueInput) => InterviewPromise;
  deleteManyInterviews: (where?: InterviewWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createSauce: (data: SauceCreateInput) => SaucePromise;
  updateSauce: (args: {
    data: SauceUpdateInput;
    where: SauceWhereUniqueInput;
  }) => SaucePromise;
  updateManySauces: (args: {
    data: SauceUpdateManyMutationInput;
    where?: SauceWhereInput;
  }) => BatchPayloadPromise;
  upsertSauce: (args: {
    where: SauceWhereUniqueInput;
    create: SauceCreateInput;
    update: SauceUpdateInput;
  }) => SaucePromise;
  deleteSauce: (where: SauceWhereUniqueInput) => SaucePromise;
  deleteManySauces: (where?: SauceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  interview: (
    where?: InterviewSubscriptionWhereInput
  ) => InterviewSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  sauce: (
    where?: SauceSubscriptionWhereInput
  ) => SauceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SauceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "scoville_ASC"
  | "scoville_DESC";

export type InterviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "host_ASC"
  | "host_DESC"
  | "guest_ASC"
  | "guest_DESC"
  | "season_ASC"
  | "season_DESC"
  | "episode_ASC"
  | "episode_DESC"
  | "airDate_ASC"
  | "airDate_DESC"
  | "link_ASC"
  | "link_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stars_ASC"
  | "stars_DESC"
  | "commentary_ASC"
  | "commentary_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "handle_ASC"
  | "handle_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type InterviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SauceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  scoville?: Maybe<Int>;
  scoville_not?: Maybe<Int>;
  scoville_in?: Maybe<Int[] | Int>;
  scoville_not_in?: Maybe<Int[] | Int>;
  scoville_lt?: Maybe<Int>;
  scoville_lte?: Maybe<Int>;
  scoville_gt?: Maybe<Int>;
  scoville_gte?: Maybe<Int>;
  appearsIn_every?: Maybe<InterviewWhereInput>;
  appearsIn_some?: Maybe<InterviewWhereInput>;
  appearsIn_none?: Maybe<InterviewWhereInput>;
  AND?: Maybe<SauceWhereInput[] | SauceWhereInput>;
  OR?: Maybe<SauceWhereInput[] | SauceWhereInput>;
  NOT?: Maybe<SauceWhereInput[] | SauceWhereInput>;
}

export interface InterviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  host?: Maybe<String>;
  host_not?: Maybe<String>;
  host_in?: Maybe<String[] | String>;
  host_not_in?: Maybe<String[] | String>;
  host_lt?: Maybe<String>;
  host_lte?: Maybe<String>;
  host_gt?: Maybe<String>;
  host_gte?: Maybe<String>;
  host_contains?: Maybe<String>;
  host_not_contains?: Maybe<String>;
  host_starts_with?: Maybe<String>;
  host_not_starts_with?: Maybe<String>;
  host_ends_with?: Maybe<String>;
  host_not_ends_with?: Maybe<String>;
  guest?: Maybe<String>;
  guest_not?: Maybe<String>;
  guest_in?: Maybe<String[] | String>;
  guest_not_in?: Maybe<String[] | String>;
  guest_lt?: Maybe<String>;
  guest_lte?: Maybe<String>;
  guest_gt?: Maybe<String>;
  guest_gte?: Maybe<String>;
  guest_contains?: Maybe<String>;
  guest_not_contains?: Maybe<String>;
  guest_starts_with?: Maybe<String>;
  guest_not_starts_with?: Maybe<String>;
  guest_ends_with?: Maybe<String>;
  guest_not_ends_with?: Maybe<String>;
  season?: Maybe<Int>;
  season_not?: Maybe<Int>;
  season_in?: Maybe<Int[] | Int>;
  season_not_in?: Maybe<Int[] | Int>;
  season_lt?: Maybe<Int>;
  season_lte?: Maybe<Int>;
  season_gt?: Maybe<Int>;
  season_gte?: Maybe<Int>;
  episode?: Maybe<Int>;
  episode_not?: Maybe<Int>;
  episode_in?: Maybe<Int[] | Int>;
  episode_not_in?: Maybe<Int[] | Int>;
  episode_lt?: Maybe<Int>;
  episode_lte?: Maybe<Int>;
  episode_gt?: Maybe<Int>;
  episode_gte?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  airDate_not?: Maybe<DateTimeInput>;
  airDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  airDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  airDate_lt?: Maybe<DateTimeInput>;
  airDate_lte?: Maybe<DateTimeInput>;
  airDate_gt?: Maybe<DateTimeInput>;
  airDate_gte?: Maybe<DateTimeInput>;
  sauces_every?: Maybe<SauceWhereInput>;
  sauces_some?: Maybe<SauceWhereInput>;
  sauces_none?: Maybe<SauceWhereInput>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<InterviewWhereInput[] | InterviewWhereInput>;
  OR?: Maybe<InterviewWhereInput[] | InterviewWhereInput>;
  NOT?: Maybe<InterviewWhereInput[] | InterviewWhereInput>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stars?: Maybe<Int>;
  stars_not?: Maybe<Int>;
  stars_in?: Maybe<Int[] | Int>;
  stars_not_in?: Maybe<Int[] | Int>;
  stars_lt?: Maybe<Int>;
  stars_lte?: Maybe<Int>;
  stars_gt?: Maybe<Int>;
  stars_gte?: Maybe<Int>;
  commentary?: Maybe<String>;
  commentary_not?: Maybe<String>;
  commentary_in?: Maybe<String[] | String>;
  commentary_not_in?: Maybe<String[] | String>;
  commentary_lt?: Maybe<String>;
  commentary_lte?: Maybe<String>;
  commentary_gt?: Maybe<String>;
  commentary_gte?: Maybe<String>;
  commentary_contains?: Maybe<String>;
  commentary_not_contains?: Maybe<String>;
  commentary_starts_with?: Maybe<String>;
  commentary_not_starts_with?: Maybe<String>;
  commentary_ends_with?: Maybe<String>;
  commentary_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  interview?: Maybe<InterviewWhereInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SauceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface InterviewCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  host?: Maybe<String>;
  guest: String;
  season: Int;
  episode: Int;
  airDate: DateTimeInput;
  sauces?: Maybe<SauceCreateManyWithoutAppearsInInput>;
  link: String;
  reviews?: Maybe<ReviewCreateManyWithoutInterviewInput>;
}

export interface SauceCreateManyWithoutAppearsInInput {
  create?: Maybe<
    SauceCreateWithoutAppearsInInput[] | SauceCreateWithoutAppearsInInput
  >;
  connect?: Maybe<SauceWhereUniqueInput[] | SauceWhereUniqueInput>;
}

export interface SauceCreateWithoutAppearsInInput {
  id?: Maybe<ID_Input>;
  name: String;
  scoville: Int;
}

export interface ReviewCreateManyWithoutInterviewInput {
  create?: Maybe<
    ReviewCreateWithoutInterviewInput[] | ReviewCreateWithoutInterviewInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutInterviewInput {
  id?: Maybe<ID_Input>;
  stars: Int;
  commentary?: Maybe<String>;
  author: UserCreateOneWithoutReviewsInput;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  handle: String;
}

export interface InterviewUpdateInput {
  title?: Maybe<String>;
  host?: Maybe<String>;
  guest?: Maybe<String>;
  season?: Maybe<Int>;
  episode?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  sauces?: Maybe<SauceUpdateManyWithoutAppearsInInput>;
  link?: Maybe<String>;
  reviews?: Maybe<ReviewUpdateManyWithoutInterviewInput>;
}

export interface SauceUpdateManyWithoutAppearsInInput {
  create?: Maybe<
    SauceCreateWithoutAppearsInInput[] | SauceCreateWithoutAppearsInInput
  >;
  delete?: Maybe<SauceWhereUniqueInput[] | SauceWhereUniqueInput>;
  connect?: Maybe<SauceWhereUniqueInput[] | SauceWhereUniqueInput>;
  set?: Maybe<SauceWhereUniqueInput[] | SauceWhereUniqueInput>;
  disconnect?: Maybe<SauceWhereUniqueInput[] | SauceWhereUniqueInput>;
  update?: Maybe<
    | SauceUpdateWithWhereUniqueWithoutAppearsInInput[]
    | SauceUpdateWithWhereUniqueWithoutAppearsInInput
  >;
  upsert?: Maybe<
    | SauceUpsertWithWhereUniqueWithoutAppearsInInput[]
    | SauceUpsertWithWhereUniqueWithoutAppearsInInput
  >;
  deleteMany?: Maybe<SauceScalarWhereInput[] | SauceScalarWhereInput>;
  updateMany?: Maybe<
    SauceUpdateManyWithWhereNestedInput[] | SauceUpdateManyWithWhereNestedInput
  >;
}

export interface SauceUpdateWithWhereUniqueWithoutAppearsInInput {
  where: SauceWhereUniqueInput;
  data: SauceUpdateWithoutAppearsInDataInput;
}

export interface SauceUpdateWithoutAppearsInDataInput {
  name?: Maybe<String>;
  scoville?: Maybe<Int>;
}

export interface SauceUpsertWithWhereUniqueWithoutAppearsInInput {
  where: SauceWhereUniqueInput;
  update: SauceUpdateWithoutAppearsInDataInput;
  create: SauceCreateWithoutAppearsInInput;
}

export interface SauceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  scoville?: Maybe<Int>;
  scoville_not?: Maybe<Int>;
  scoville_in?: Maybe<Int[] | Int>;
  scoville_not_in?: Maybe<Int[] | Int>;
  scoville_lt?: Maybe<Int>;
  scoville_lte?: Maybe<Int>;
  scoville_gt?: Maybe<Int>;
  scoville_gte?: Maybe<Int>;
  AND?: Maybe<SauceScalarWhereInput[] | SauceScalarWhereInput>;
  OR?: Maybe<SauceScalarWhereInput[] | SauceScalarWhereInput>;
  NOT?: Maybe<SauceScalarWhereInput[] | SauceScalarWhereInput>;
}

export interface SauceUpdateManyWithWhereNestedInput {
  where: SauceScalarWhereInput;
  data: SauceUpdateManyDataInput;
}

export interface SauceUpdateManyDataInput {
  name?: Maybe<String>;
  scoville?: Maybe<Int>;
}

export interface ReviewUpdateManyWithoutInterviewInput {
  create?: Maybe<
    ReviewCreateWithoutInterviewInput[] | ReviewCreateWithoutInterviewInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutInterviewInput[]
    | ReviewUpdateWithWhereUniqueWithoutInterviewInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutInterviewInput[]
    | ReviewUpsertWithWhereUniqueWithoutInterviewInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutInterviewInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutInterviewDataInput;
}

export interface ReviewUpdateWithoutInterviewDataInput {
  stars?: Maybe<Int>;
  commentary?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  update?: Maybe<UserUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  handle?: Maybe<String>;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutInterviewInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutInterviewDataInput;
  create: ReviewCreateWithoutInterviewInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stars?: Maybe<Int>;
  stars_not?: Maybe<Int>;
  stars_in?: Maybe<Int[] | Int>;
  stars_not_in?: Maybe<Int[] | Int>;
  stars_lt?: Maybe<Int>;
  stars_lte?: Maybe<Int>;
  stars_gt?: Maybe<Int>;
  stars_gte?: Maybe<Int>;
  commentary?: Maybe<String>;
  commentary_not?: Maybe<String>;
  commentary_in?: Maybe<String[] | String>;
  commentary_not_in?: Maybe<String[] | String>;
  commentary_lt?: Maybe<String>;
  commentary_lte?: Maybe<String>;
  commentary_gt?: Maybe<String>;
  commentary_gte?: Maybe<String>;
  commentary_contains?: Maybe<String>;
  commentary_not_contains?: Maybe<String>;
  commentary_starts_with?: Maybe<String>;
  commentary_not_starts_with?: Maybe<String>;
  commentary_ends_with?: Maybe<String>;
  commentary_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  stars?: Maybe<Int>;
  commentary?: Maybe<String>;
}

export interface InterviewUpdateManyMutationInput {
  title?: Maybe<String>;
  host?: Maybe<String>;
  guest?: Maybe<String>;
  season?: Maybe<Int>;
  episode?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  link?: Maybe<String>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  stars: Int;
  commentary?: Maybe<String>;
  author: UserCreateOneWithoutReviewsInput;
  interview: InterviewCreateOneWithoutReviewsInput;
}

export interface InterviewCreateOneWithoutReviewsInput {
  create?: Maybe<InterviewCreateWithoutReviewsInput>;
  connect?: Maybe<InterviewWhereUniqueInput>;
}

export interface InterviewCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  title: String;
  host?: Maybe<String>;
  guest: String;
  season: Int;
  episode: Int;
  airDate: DateTimeInput;
  sauces?: Maybe<SauceCreateManyWithoutAppearsInInput>;
  link: String;
}

export interface ReviewUpdateInput {
  stars?: Maybe<Int>;
  commentary?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
  interview?: Maybe<InterviewUpdateOneRequiredWithoutReviewsInput>;
}

export interface InterviewUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<InterviewCreateWithoutReviewsInput>;
  update?: Maybe<InterviewUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<InterviewUpsertWithoutReviewsInput>;
  connect?: Maybe<InterviewWhereUniqueInput>;
}

export interface InterviewUpdateWithoutReviewsDataInput {
  title?: Maybe<String>;
  host?: Maybe<String>;
  guest?: Maybe<String>;
  season?: Maybe<Int>;
  episode?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  sauces?: Maybe<SauceUpdateManyWithoutAppearsInInput>;
  link?: Maybe<String>;
}

export interface InterviewUpsertWithoutReviewsInput {
  update: InterviewUpdateWithoutReviewsDataInput;
  create: InterviewCreateWithoutReviewsInput;
}

export interface ReviewUpdateManyMutationInput {
  stars?: Maybe<Int>;
  commentary?: Maybe<String>;
}

export interface SauceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  scoville: Int;
  appearsIn?: Maybe<InterviewCreateManyWithoutSaucesInput>;
}

export interface InterviewCreateManyWithoutSaucesInput {
  create?: Maybe<
    InterviewCreateWithoutSaucesInput[] | InterviewCreateWithoutSaucesInput
  >;
  connect?: Maybe<InterviewWhereUniqueInput[] | InterviewWhereUniqueInput>;
}

export interface InterviewCreateWithoutSaucesInput {
  id?: Maybe<ID_Input>;
  title: String;
  host?: Maybe<String>;
  guest: String;
  season: Int;
  episode: Int;
  airDate: DateTimeInput;
  link: String;
  reviews?: Maybe<ReviewCreateManyWithoutInterviewInput>;
}

export interface SauceUpdateInput {
  name?: Maybe<String>;
  scoville?: Maybe<Int>;
  appearsIn?: Maybe<InterviewUpdateManyWithoutSaucesInput>;
}

export interface InterviewUpdateManyWithoutSaucesInput {
  create?: Maybe<
    InterviewCreateWithoutSaucesInput[] | InterviewCreateWithoutSaucesInput
  >;
  delete?: Maybe<InterviewWhereUniqueInput[] | InterviewWhereUniqueInput>;
  connect?: Maybe<InterviewWhereUniqueInput[] | InterviewWhereUniqueInput>;
  set?: Maybe<InterviewWhereUniqueInput[] | InterviewWhereUniqueInput>;
  disconnect?: Maybe<InterviewWhereUniqueInput[] | InterviewWhereUniqueInput>;
  update?: Maybe<
    | InterviewUpdateWithWhereUniqueWithoutSaucesInput[]
    | InterviewUpdateWithWhereUniqueWithoutSaucesInput
  >;
  upsert?: Maybe<
    | InterviewUpsertWithWhereUniqueWithoutSaucesInput[]
    | InterviewUpsertWithWhereUniqueWithoutSaucesInput
  >;
  deleteMany?: Maybe<InterviewScalarWhereInput[] | InterviewScalarWhereInput>;
  updateMany?: Maybe<
    | InterviewUpdateManyWithWhereNestedInput[]
    | InterviewUpdateManyWithWhereNestedInput
  >;
}

export interface InterviewUpdateWithWhereUniqueWithoutSaucesInput {
  where: InterviewWhereUniqueInput;
  data: InterviewUpdateWithoutSaucesDataInput;
}

export interface InterviewUpdateWithoutSaucesDataInput {
  title?: Maybe<String>;
  host?: Maybe<String>;
  guest?: Maybe<String>;
  season?: Maybe<Int>;
  episode?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  link?: Maybe<String>;
  reviews?: Maybe<ReviewUpdateManyWithoutInterviewInput>;
}

export interface InterviewUpsertWithWhereUniqueWithoutSaucesInput {
  where: InterviewWhereUniqueInput;
  update: InterviewUpdateWithoutSaucesDataInput;
  create: InterviewCreateWithoutSaucesInput;
}

export interface InterviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  host?: Maybe<String>;
  host_not?: Maybe<String>;
  host_in?: Maybe<String[] | String>;
  host_not_in?: Maybe<String[] | String>;
  host_lt?: Maybe<String>;
  host_lte?: Maybe<String>;
  host_gt?: Maybe<String>;
  host_gte?: Maybe<String>;
  host_contains?: Maybe<String>;
  host_not_contains?: Maybe<String>;
  host_starts_with?: Maybe<String>;
  host_not_starts_with?: Maybe<String>;
  host_ends_with?: Maybe<String>;
  host_not_ends_with?: Maybe<String>;
  guest?: Maybe<String>;
  guest_not?: Maybe<String>;
  guest_in?: Maybe<String[] | String>;
  guest_not_in?: Maybe<String[] | String>;
  guest_lt?: Maybe<String>;
  guest_lte?: Maybe<String>;
  guest_gt?: Maybe<String>;
  guest_gte?: Maybe<String>;
  guest_contains?: Maybe<String>;
  guest_not_contains?: Maybe<String>;
  guest_starts_with?: Maybe<String>;
  guest_not_starts_with?: Maybe<String>;
  guest_ends_with?: Maybe<String>;
  guest_not_ends_with?: Maybe<String>;
  season?: Maybe<Int>;
  season_not?: Maybe<Int>;
  season_in?: Maybe<Int[] | Int>;
  season_not_in?: Maybe<Int[] | Int>;
  season_lt?: Maybe<Int>;
  season_lte?: Maybe<Int>;
  season_gt?: Maybe<Int>;
  season_gte?: Maybe<Int>;
  episode?: Maybe<Int>;
  episode_not?: Maybe<Int>;
  episode_in?: Maybe<Int[] | Int>;
  episode_not_in?: Maybe<Int[] | Int>;
  episode_lt?: Maybe<Int>;
  episode_lte?: Maybe<Int>;
  episode_gt?: Maybe<Int>;
  episode_gte?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  airDate_not?: Maybe<DateTimeInput>;
  airDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  airDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  airDate_lt?: Maybe<DateTimeInput>;
  airDate_lte?: Maybe<DateTimeInput>;
  airDate_gt?: Maybe<DateTimeInput>;
  airDate_gte?: Maybe<DateTimeInput>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  AND?: Maybe<InterviewScalarWhereInput[] | InterviewScalarWhereInput>;
  OR?: Maybe<InterviewScalarWhereInput[] | InterviewScalarWhereInput>;
  NOT?: Maybe<InterviewScalarWhereInput[] | InterviewScalarWhereInput>;
}

export interface InterviewUpdateManyWithWhereNestedInput {
  where: InterviewScalarWhereInput;
  data: InterviewUpdateManyDataInput;
}

export interface InterviewUpdateManyDataInput {
  title?: Maybe<String>;
  host?: Maybe<String>;
  guest?: Maybe<String>;
  season?: Maybe<Int>;
  episode?: Maybe<Int>;
  airDate?: Maybe<DateTimeInput>;
  link?: Maybe<String>;
}

export interface SauceUpdateManyMutationInput {
  name?: Maybe<String>;
  scoville?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  handle: String;
  reviews?: Maybe<ReviewCreateManyWithoutAuthorInput>;
}

export interface ReviewCreateManyWithoutAuthorInput {
  create?: Maybe<
    ReviewCreateWithoutAuthorInput[] | ReviewCreateWithoutAuthorInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  stars: Int;
  commentary?: Maybe<String>;
  interview: InterviewCreateOneWithoutReviewsInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  handle?: Maybe<String>;
  reviews?: Maybe<ReviewUpdateManyWithoutAuthorInput>;
}

export interface ReviewUpdateManyWithoutAuthorInput {
  create?: Maybe<
    ReviewCreateWithoutAuthorInput[] | ReviewCreateWithoutAuthorInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutAuthorInput[]
    | ReviewUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutAuthorInput[]
    | ReviewUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutAuthorDataInput;
}

export interface ReviewUpdateWithoutAuthorDataInput {
  stars?: Maybe<Int>;
  commentary?: Maybe<String>;
  interview?: Maybe<InterviewUpdateOneRequiredWithoutReviewsInput>;
}

export interface ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutAuthorDataInput;
  create: ReviewCreateWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  handle?: Maybe<String>;
}

export interface InterviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InterviewWhereInput>;
  AND?: Maybe<
    InterviewSubscriptionWhereInput[] | InterviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    InterviewSubscriptionWhereInput[] | InterviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InterviewSubscriptionWhereInput[] | InterviewSubscriptionWhereInput
  >;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface SauceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SauceWhereInput>;
  AND?: Maybe<SauceSubscriptionWhereInput[] | SauceSubscriptionWhereInput>;
  OR?: Maybe<SauceSubscriptionWhereInput[] | SauceSubscriptionWhereInput>;
  NOT?: Maybe<SauceSubscriptionWhereInput[] | SauceSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Interview {
  id: ID_Output;
  title: String;
  host: String;
  guest: String;
  season: Int;
  episode: Int;
  airDate: DateTimeOutput;
  link: String;
}

export interface InterviewPromise extends Promise<Interview>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  host: () => Promise<String>;
  guest: () => Promise<String>;
  season: () => Promise<Int>;
  episode: () => Promise<Int>;
  airDate: () => Promise<DateTimeOutput>;
  sauces: <T = FragmentableArray<Sauce>>(args?: {
    where?: SauceWhereInput;
    orderBy?: SauceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  link: () => Promise<String>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InterviewSubscription
  extends Promise<AsyncIterator<Interview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  host: () => Promise<AsyncIterator<String>>;
  guest: () => Promise<AsyncIterator<String>>;
  season: () => Promise<AsyncIterator<Int>>;
  episode: () => Promise<AsyncIterator<Int>>;
  airDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  sauces: <T = Promise<AsyncIterator<SauceSubscription>>>(args?: {
    where?: SauceWhereInput;
    orderBy?: SauceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  link: () => Promise<AsyncIterator<String>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InterviewNullablePromise
  extends Promise<Interview | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  host: () => Promise<String>;
  guest: () => Promise<String>;
  season: () => Promise<Int>;
  episode: () => Promise<Int>;
  airDate: () => Promise<DateTimeOutput>;
  sauces: <T = FragmentableArray<Sauce>>(args?: {
    where?: SauceWhereInput;
    orderBy?: SauceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  link: () => Promise<String>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Sauce {
  id: ID_Output;
  name: String;
  scoville: Int;
}

export interface SaucePromise extends Promise<Sauce>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  scoville: () => Promise<Int>;
  appearsIn: <T = FragmentableArray<Interview>>(args?: {
    where?: InterviewWhereInput;
    orderBy?: InterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SauceSubscription
  extends Promise<AsyncIterator<Sauce>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  scoville: () => Promise<AsyncIterator<Int>>;
  appearsIn: <T = Promise<AsyncIterator<InterviewSubscription>>>(args?: {
    where?: InterviewWhereInput;
    orderBy?: InterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SauceNullablePromise
  extends Promise<Sauce | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  scoville: () => Promise<Int>;
  appearsIn: <T = FragmentableArray<Interview>>(args?: {
    where?: InterviewWhereInput;
    orderBy?: InterviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Review {
  id: ID_Output;
  stars: Int;
  commentary?: String;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  stars: () => Promise<Int>;
  commentary: () => Promise<String>;
  author: <T = UserPromise>() => T;
  interview: <T = InterviewPromise>() => T;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stars: () => Promise<AsyncIterator<Int>>;
  commentary: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  interview: <T = InterviewSubscription>() => T;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stars: () => Promise<Int>;
  commentary: () => Promise<String>;
  author: <T = UserPromise>() => T;
  interview: <T = InterviewPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  handle: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  handle: () => Promise<String>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  handle: () => Promise<String>;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InterviewConnection {
  pageInfo: PageInfo;
  edges: InterviewEdge[];
}

export interface InterviewConnectionPromise
  extends Promise<InterviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InterviewEdge>>() => T;
  aggregate: <T = AggregateInterviewPromise>() => T;
}

export interface InterviewConnectionSubscription
  extends Promise<AsyncIterator<InterviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InterviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInterviewSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface InterviewEdge {
  node: Interview;
  cursor: String;
}

export interface InterviewEdgePromise
  extends Promise<InterviewEdge>,
    Fragmentable {
  node: <T = InterviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InterviewEdgeSubscription
  extends Promise<AsyncIterator<InterviewEdge>>,
    Fragmentable {
  node: <T = InterviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInterview {
  count: Int;
}

export interface AggregateInterviewPromise
  extends Promise<AggregateInterview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInterviewSubscription
  extends Promise<AsyncIterator<AggregateInterview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SauceConnection {
  pageInfo: PageInfo;
  edges: SauceEdge[];
}

export interface SauceConnectionPromise
  extends Promise<SauceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SauceEdge>>() => T;
  aggregate: <T = AggregateSaucePromise>() => T;
}

export interface SauceConnectionSubscription
  extends Promise<AsyncIterator<SauceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SauceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSauceSubscription>() => T;
}

export interface SauceEdge {
  node: Sauce;
  cursor: String;
}

export interface SauceEdgePromise extends Promise<SauceEdge>, Fragmentable {
  node: <T = SaucePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SauceEdgeSubscription
  extends Promise<AsyncIterator<SauceEdge>>,
    Fragmentable {
  node: <T = SauceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSauce {
  count: Int;
}

export interface AggregateSaucePromise
  extends Promise<AggregateSauce>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSauceSubscription
  extends Promise<AsyncIterator<AggregateSauce>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface InterviewSubscriptionPayload {
  mutation: MutationType;
  node: Interview;
  updatedFields: String[];
  previousValues: InterviewPreviousValues;
}

export interface InterviewSubscriptionPayloadPromise
  extends Promise<InterviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InterviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InterviewPreviousValuesPromise>() => T;
}

export interface InterviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InterviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InterviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InterviewPreviousValuesSubscription>() => T;
}

export interface InterviewPreviousValues {
  id: ID_Output;
  title: String;
  host: String;
  guest: String;
  season: Int;
  episode: Int;
  airDate: DateTimeOutput;
  link: String;
}

export interface InterviewPreviousValuesPromise
  extends Promise<InterviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  host: () => Promise<String>;
  guest: () => Promise<String>;
  season: () => Promise<Int>;
  episode: () => Promise<Int>;
  airDate: () => Promise<DateTimeOutput>;
  link: () => Promise<String>;
}

export interface InterviewPreviousValuesSubscription
  extends Promise<AsyncIterator<InterviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  host: () => Promise<AsyncIterator<String>>;
  guest: () => Promise<AsyncIterator<String>>;
  season: () => Promise<AsyncIterator<Int>>;
  episode: () => Promise<AsyncIterator<Int>>;
  airDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  link: () => Promise<AsyncIterator<String>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  stars: Int;
  commentary?: String;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stars: () => Promise<Int>;
  commentary: () => Promise<String>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stars: () => Promise<AsyncIterator<Int>>;
  commentary: () => Promise<AsyncIterator<String>>;
}

export interface SauceSubscriptionPayload {
  mutation: MutationType;
  node: Sauce;
  updatedFields: String[];
  previousValues: SaucePreviousValues;
}

export interface SauceSubscriptionPayloadPromise
  extends Promise<SauceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaucePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaucePreviousValuesPromise>() => T;
}

export interface SauceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SauceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SauceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaucePreviousValuesSubscription>() => T;
}

export interface SaucePreviousValues {
  id: ID_Output;
  name: String;
  scoville: Int;
}

export interface SaucePreviousValuesPromise
  extends Promise<SaucePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  scoville: () => Promise<Int>;
}

export interface SaucePreviousValuesSubscription
  extends Promise<AsyncIterator<SaucePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  scoville: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  handle: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  handle: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Interview",
    embedded: false
  },
  {
    name: "Sauce",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
